//#include "functions.clu"
//#include "defines.clu"
//#include "torso_from_origin.clu"
//#include "arm_from_sternum.clu"
//#include "head_from_sternum.clu"
//#include "leg_from_pelvis.clu"
DefVarsN3(); // Define CGA (G_{4,1})
DrawFrame(0.5,"axes"); // Reference frame


:IPNS;
is_animate = CheckBox("Animate", 0);
EnableAnimate(is_animate);
if (ExecMode & !EM_ANIMATE) {
	Data = ReadData("../data/data.dat");
    ?N = Size(Data);
}
?i = round(Time * ANIMATION_SPEED, 0) % N + 1; // +1 because of 1-based indexing
frame_data = Data(i);

global_motor = TranslatorN3(
							frame_data(ORIGIN_TRANSLATION + X),
							frame_data(ORIGIN_TRANSLATION + Y),
							frame_data(ORIGIN_TRANSLATION + Z)
							)
			* RotorN3(1, 0, 0, frame_data(ORIGIN_ROT + X))
			* RotorN3(0, 1, 0, frame_data(ORIGIN_ROT + Y))
			* RotorN3(0, 0, 1, frame_data(ORIGIN_ROT + Z));
M = global_motor;
O = M * e0 * (~M); // Start point (origin)

// Create torso and get connection points
torso_result = ::TorsoFromOrigin(O, global_motor, frame_data, is_animate);
hip_left_point = torso_result(1);
hip_right_point = torso_result(2);
sternum_point = torso_result(3);
hip_left_motor = torso_result(4);
hip_right_motor = torso_result(5);
sternum_motor = torso_result(6);

// Create legs from hip points
::LegFromPelvis(hip_left_point, false, hip_left_motor, frame_data, is_animate); // left
::LegFromPelvis(hip_right_point, true, hip_right_motor, frame_data, is_animate); // right

// Create arms from sternum (using upper body motor for proper rotation)
::ArmFromSternum(sternum_point, true, sternum_motor, frame_data, is_animate);
::ArmFromSternum(sternum_point, false, sternum_motor, frame_data, is_animate);

// Create head from sternum
::HeadFromSternum(sternum_point, sternum_motor, frame_data, is_animate)
