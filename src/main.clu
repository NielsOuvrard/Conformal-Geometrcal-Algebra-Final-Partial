//#include "functions.clu"
//#include "defines.clu"
//#include "arm_from_sternum.clu"
//#include "leg_from_pelvis.clu"
DefVarsN3(); // Define CGA (G_{4,1})
DrawFrame(0.5,"axes"); // Reference frame


:IPNS;
EnableAnimate(CheckBox("Animate", 0));
if (ExecMode & !EM_ANIMATE) {
	Data = ReadData("../data/data.dat");
    ?N = Size(Data);
}
?i = round(Time * ANIMATION_SPEED, 0) % N + 1; // +1 because of 1-based indexing
frame_data = Data(i);

global_motor = TranslatorN3(
							frame_data(ORIGIN_TRANSLATION + X),
							frame_data(ORIGIN_TRANSLATION + Y),
							frame_data(ORIGIN_TRANSLATION + Z)
							)
			* RotorN3(1, 0, 0, frame_data(ORIGIN_ROT + X))
			* RotorN3(0, 1, 0, frame_data(ORIGIN_ROT + Y))
			* RotorN3(0, 0, 1, frame_data(ORIGIN_ROT + Z));
M = global_motor;
O = M * e0 * (~M); // Start point (origin)


leg_global_motor_r = TranslatorN3(-(PELVIS_V_LENGHT / 2), 0, 0);
leg_global_motor_l = TranslatorN3((PELVIS_V_LENGHT / 2), 0, 0);
leg_r_motor = global_motor * leg_global_motor_r;
leg_l_motor = global_motor * leg_global_motor_l;
::LegFromPelvis(leg_l_motor * e0 * (~leg_l_motor), false, leg_l_motor, frame_data); // left
::LegFromPelvis(leg_r_motor * e0 * (~leg_r_motor), true, leg_r_motor, frame_data); // right

arms_global_motor = TranslatorN3(0, PELVIS_H_LENGHT + BACK_LENGHT, 0);
arm_motor = global_motor * arms_global_motor;

::ArmFromSternum(arm_motor * e0 * (~arm_motor), true, arm_motor, frame_data);
::ArmFromSternum(arm_motor * e0 * (~arm_motor), false, arm_motor, frame_data);


// Create torso


//   | y
// /z -x

// e1 = x
// e2 = y
// e3 = z
